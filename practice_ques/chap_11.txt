1. Write an assert statement that triggers an AssertionError if the variable spam is an integer less than 10.
   
   assert spam>=10, 'The spam variable is less than 10'


2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are considered the same, and 'goodbye' and 'GOODbye' are also considered the same).
   
   assert eggs.lower() != bacon.lower(), 'The eggs and bacon variables are the same!'


3. Write an assert statement that always triggers an AssertionError.
   
   assert False, 'Always triggers an AssertionError'


4. What are the two lines that your program must have in order to be able to call logging.debug()?
   
   import logging
   logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s -  %(message)s')


5. What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?
   
   import logging
   logging.basicConfig(filename='programLog.txt', level=logging.DEBUG, format=' %(asctime)s - %(levelname)s -  %(message)s')


6. What are the five logging levels?
   
   DEBUG, INFO, WARNING, ERROR, and CRITICAL are the five logging levels.


7. What line of code can you add to disable all logging messages in your program?
   
   logging.disable(logging.CRITICAL)


8. Why is using logging messages better than using print() to display the same message?
   
   Because disabling all the logging messages is just a matter of commenting out a single line of code, logging.disable() which is a lot more easier and efficient than commenting out all the print() statements.


9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?
   
   The Step In will “step into” that function and jump to the first line of code of that function. The Step Over button will quickly execute the function call without stepping into it. The Step Out button will quickly execute the rest of the code until it steps out of the function it currently is in.


10. After you click Continue, when will the debugger stop?
    
    Clicking the Continue button will cause the program to execute normally until it terminates or reaches a breakpoint


11. What is a breakpoint?
    
    A breakpoint is the line of code that causes the debugger to pause when the program execution reaches the line.


12. How do you set a breakpoint on a line of code in Mu?
    
    Right click on the line and select Set Breakpoint from the context menu. A red dot appears before the line set as breakpoint.